#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codegen_1 = require("./codegen");
const yargs = __importStar(require("yargs"));
const fs_1 = __importDefault(require("fs"));
const moduleOptions = ['esm', 'commonjs'];
const languageOptions = ['js', 'ts', "match"];
function main() {
    const opts = yargs.options({
        "input": { type: "string", demandOption: true, description: 'Input filepath to wrap, can be any file.' },
        "output": { type: "string", description: 'Where to write the output, if not specified it prints the file contents to STDOUT.' },
        "language": { choices: languageOptions, default: "match", description: 'language of output file, by default it looks at the output filename.' },
        "module": { choices: moduleOptions, default: "esm", description: 'module type to generate, only necessary to change if you are using an old node version.' },
        "include-decode": { type: "boolean", default: true, description: 'include a base64 decode function that works both in the browser and in node/deno (~1KB unminified).' },
    }).argv;
    // Read input file 
    const inFilePath = opts.input;
    const fileContents = fs_1.default.readFileSync(inFilePath);
    if (opts.language === "match") {
        if (opts.output !== undefined && opts.output.endsWith(".ts")) {
            opts.language = "ts";
        }
        else {
            opts.language = "js";
        }
    }
    const renderData = {
        base64Wasm: fileContents.toString('base64'),
        module: opts.module,
        includeDecode: opts["include-decode"],
        typescript: opts.language === "ts",
    };
    const outFileContents = codegen_1.renderCode(renderData);
    if (opts.output === undefined) {
        console.log(outFileContents);
    }
    else {
        fs_1.default.writeFileSync(opts.output, outFileContents);
    }
}
main();
